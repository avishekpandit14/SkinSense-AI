// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A personalized recommendation AI agent based on the AI diagnosis results.
 *
 * - generateRecommendation - A function that handles the personalized recommendation process.
 * - GenerateRecommendationInput - The input type for the generateRecommendation function.
 * - GenerateRecommendationOutput - The return type for the generateRecommendation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateRecommendationInputSchema = z.object({
  diagnosis: z.string().describe('The diagnosis of the skin condition.'),
  confidence: z.number().describe('The confidence level of the diagnosis (0-1).'),
  info: z.string().describe('Additional information about the skin condition.'),
});
export type GenerateRecommendationInput = z.infer<typeof GenerateRecommendationInputSchema>;

const GenerateRecommendationOutputSchema = z.object({
  recommendation: z.string().describe('The personalized recommendation based on the diagnosis.'),
});
export type GenerateRecommendationOutput = z.infer<typeof GenerateRecommendationOutputSchema>;

export async function generateRecommendation(input: GenerateRecommendationInput): Promise<GenerateRecommendationOutput> {
  return generateRecommendationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateRecommendationPrompt',
  input: {schema: GenerateRecommendationInputSchema},
  output: {schema: GenerateRecommendationOutputSchema},
  prompt: `You are a helpful AI assistant specializing in dermatology recommendations.

  Based on the following AI diagnosis results, generate a personalized recommendation for the user.

  Diagnosis: {{{diagnosis}}}
  Confidence: {{{confidence}}}
  Additional Information: {{{info}}}

  Recommendation:`, // Keep it simple, the LLM will figure out the correct structure based on the schema
});

const generateRecommendationFlow = ai.defineFlow(
  {
    name: 'generateRecommendationFlow',
    inputSchema: GenerateRecommendationInputSchema,
    outputSchema: GenerateRecommendationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
